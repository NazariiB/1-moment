"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-sketch-canvas";
exports.ids = ["vendor-chunks/react-sketch-canvas"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-sketch-canvas/dist/react-sketch-canvas.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-sketch-canvas/dist/react-sketch-canvas.esm.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Canvas: () => (/* binding */ Canvas),\n/* harmony export */   ReactSketchCanvas: () => (/* binding */ ReactSketchCanvas)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar runtime = {exports: {}};\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n(function (module) {\nvar runtime = (function (exports) {\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined$1; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined$1) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined$1;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined$1;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined$1;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined$1, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined$1;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined$1;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined$1;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined$1;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined$1;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  module.exports \n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n}(runtime));\n\nvar _regeneratorRuntime = runtime.exports;\n\n/**\r\n * Generate SVG Path tag from the given points\r\n */\n\nvar SvgPath = function SvgPath(_ref) {\n  var paths = _ref.paths,\n      id = _ref.id,\n      strokeWidth = _ref.strokeWidth,\n      strokeColor = _ref.strokeColor,\n      _ref$command = _ref.command,\n      command = _ref$command === void 0 ? bezierCommand : _ref$command;\n\n  if (paths.length === 1) {\n    var _paths$ = paths[0],\n        x = _paths$.x,\n        y = _paths$.y;\n    var radius = strokeWidth / 2;\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n      key: id,\n      id: id,\n      cx: x,\n      cy: y,\n      r: radius,\n      stroke: strokeColor,\n      fill: strokeColor\n    });\n  }\n\n  var d = paths.reduce(function (acc, point, i, a) {\n    return i === 0 ? \"M \" + point.x + \",\" + point.y : acc + \" \" + command(point, i, a);\n  }, '');\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    key: id,\n    id: id,\n    d: d,\n    fill: \"none\",\n    strokeLinecap: \"round\",\n    stroke: strokeColor,\n    strokeWidth: strokeWidth\n  });\n};\nvar line = function line(pointA, pointB) {\n  var lengthX = pointB.x - pointA.x;\n  var lengthY = pointB.y - pointA.y;\n  return {\n    length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\n    angle: Math.atan2(lengthY, lengthX)\n  };\n};\n\nvar controlPoint = function controlPoint(controlPoints) {\n  var current = controlPoints.current,\n      next = controlPoints.next,\n      previous = controlPoints.previous,\n      reverse = controlPoints.reverse;\n  var p = previous || current;\n  var n = next || current;\n  var smoothing = 0.2;\n  var o = line(p, n);\n  var angle = o.angle + (reverse ? Math.PI : 0);\n  var length = o.length * smoothing;\n  var x = current.x + Math.cos(angle) * length;\n  var y = current.y + Math.sin(angle) * length;\n  return [x, y];\n};\n\nvar bezierCommand = function bezierCommand(point, i, a) {\n  var cpsX = null;\n  var cpsY = null;\n\n  switch (i) {\n    case 0:\n      var _controlPoint = controlPoint({\n        current: point\n      });\n\n      cpsX = _controlPoint[0];\n      cpsY = _controlPoint[1];\n      break;\n\n    case 1:\n      var _controlPoint2 = controlPoint({\n        current: a[i - 1],\n        next: point\n      });\n\n      cpsX = _controlPoint2[0];\n      cpsY = _controlPoint2[1];\n      break;\n\n    default:\n      var _controlPoint3 = controlPoint({\n        current: a[i - 1],\n        previous: a[i - 2],\n        next: point\n      });\n\n      cpsX = _controlPoint3[0];\n      cpsY = _controlPoint3[1];\n      break;\n  }\n\n  var _controlPoint4 = controlPoint({\n    current: point,\n    previous: a[i - 1],\n    next: a[i + 1],\n    reverse: true\n  }),\n      cpeX = _controlPoint4[0],\n      cpeY = _controlPoint4[1];\n\n  return \"C \" + cpsX + \",\" + cpsY + \" \" + cpeX + \",\" + cpeY + \" \" + point.x + \", \" + point.y;\n};\n\nvar Paths = function Paths(_ref2) {\n  var id = _ref2.id,\n      paths = _ref2.paths;\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, paths.map(function (path, index) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(SvgPath, {\n      key: id + \"__\" + index,\n      paths: path.paths,\n      id: id + \"__\" + index,\n      strokeWidth: path.strokeWidth,\n      strokeColor: path.strokeColor,\n      command: bezierCommand\n    });\n  }));\n};\n\nvar loadImage = function loadImage(url) {\n  return new Promise(function (resolve, reject) {\n    var img = new Image();\n    img.addEventListener('load', function () {\n      if (img.width > 0) {\n        resolve(img);\n      }\n\n      reject('Image not found');\n    });\n    img.addEventListener('error', function (err) {\n      return reject(err);\n    });\n    img.src = url;\n    img.setAttribute('crossorigin', 'anonymous');\n  });\n};\n\nfunction getCanvasWithViewBox(canvas) {\n  var _canvas$firstChild;\n\n  var svgCanvas = (_canvas$firstChild = canvas.firstChild) == null ? void 0 : _canvas$firstChild.cloneNode(true);\n  var width = canvas.offsetWidth;\n  var height = canvas.offsetHeight;\n  svgCanvas.setAttribute('viewBox', \"0 0 \" + width + \" \" + height);\n  svgCanvas.setAttribute('width', width.toString());\n  svgCanvas.setAttribute('height', height.toString());\n  return {\n    svgCanvas: svgCanvas,\n    width: width,\n    height: height\n  };\n}\n\nvar Canvas = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (props, ref) {\n  var paths = props.paths,\n      isDrawing = props.isDrawing,\n      onPointerDown = props.onPointerDown,\n      onPointerMove = props.onPointerMove,\n      onPointerUp = props.onPointerUp,\n      _props$id = props.id,\n      id = _props$id === void 0 ? 'react-sketch-canvas' : _props$id,\n      _props$width = props.width,\n      width = _props$width === void 0 ? '100%' : _props$width,\n      _props$height = props.height,\n      height = _props$height === void 0 ? '100%' : _props$height,\n      _props$className = props.className,\n      className = _props$className === void 0 ? 'react-sketch-canvas' : _props$className,\n      _props$canvasColor = props.canvasColor,\n      canvasColor = _props$canvasColor === void 0 ? 'red' : _props$canvasColor,\n      _props$backgroundImag = props.backgroundImage,\n      backgroundImage = _props$backgroundImag === void 0 ? '' : _props$backgroundImag,\n      _props$exportWithBack = props.exportWithBackgroundImage,\n      exportWithBackgroundImage = _props$exportWithBack === void 0 ? false : _props$exportWithBack,\n      _props$preserveBackgr = props.preserveBackgroundImageAspectRatio,\n      preserveBackgroundImageAspectRatio = _props$preserveBackgr === void 0 ? 'none' : _props$preserveBackgr,\n      _props$allowOnlyPoint = props.allowOnlyPointerType,\n      allowOnlyPointerType = _props$allowOnlyPoint === void 0 ? 'all' : _props$allowOnlyPoint,\n      _props$style = props.style,\n      style = _props$style === void 0 ? {\n    border: '0.0625rem solid #9c9c9c',\n    borderRadius: '0.25rem'\n  } : _props$style,\n      _props$svgStyle = props.svgStyle,\n      svgStyle = _props$svgStyle === void 0 ? {} : _props$svgStyle;\n  var canvasRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null); // Converts mouse coordinates to relative coordinate based on the absolute position of svg\n\n  var getCoordinates = function getCoordinates(pointerEvent) {\n    var _canvasRef$current, _window$scrollX, _window$scrollY;\n\n    var boundingArea = (_canvasRef$current = canvasRef.current) == null ? void 0 : _canvasRef$current.getBoundingClientRect();\n    var scrollLeft = (_window$scrollX = window.scrollX) != null ? _window$scrollX : 0;\n    var scrollTop = (_window$scrollY = window.scrollY) != null ? _window$scrollY : 0;\n\n    if (!boundingArea) {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n\n    var point = {\n      x: pointerEvent.pageX - boundingArea.left - scrollLeft,\n      y: pointerEvent.pageY - boundingArea.top - scrollTop\n    };\n    return point;\n  };\n  /* Mouse Handlers - Mouse down, move and up */\n\n\n  var handlePointerDown = function handlePointerDown(event) {\n    // Allow only chosen pointer type\n    if (allowOnlyPointerType !== 'all' && event.pointerType !== allowOnlyPointerType) {\n      return;\n    }\n\n    if (event.pointerType === 'mouse' && event.button !== 0) return;\n    var point = getCoordinates(event);\n    onPointerDown(point);\n  };\n\n  var handlePointerMove = function handlePointerMove(event) {\n    if (!isDrawing) return; // Allow only chosen pointer type\n\n    if (allowOnlyPointerType !== 'all' && event.pointerType !== allowOnlyPointerType) {\n      return;\n    }\n\n    var point = getCoordinates(event);\n    onPointerMove(point);\n  };\n\n  var handlePointerUp = function handlePointerUp(event) {\n    if (event.pointerType === 'mouse' && event.button !== 0) return; // Allow only chosen pointer type\n\n    if (allowOnlyPointerType !== 'all' && event.pointerType !== allowOnlyPointerType) {\n      return;\n    }\n\n    onPointerUp();\n  };\n  /* Mouse Handlers ends */\n\n\n  react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(ref, function () {\n    return {\n      exportImage: function exportImage(imageType) {\n        return new Promise( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n            var canvas, _getCanvasWithViewBox, svgCanvas, _width, _height, canvasSketch, loadImagePromises, img;\n\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    canvas = canvasRef.current;\n\n                    if (canvas) {\n                      _context.next = 4;\n                      break;\n                    }\n\n                    throw Error('Canvas not rendered yet');\n\n                  case 4:\n                    _getCanvasWithViewBox = getCanvasWithViewBox(canvas), svgCanvas = _getCanvasWithViewBox.svgCanvas, _width = _getCanvasWithViewBox.width, _height = _getCanvasWithViewBox.height;\n                    canvasSketch = \"data:image/svg+xml;base64,\" + btoa(svgCanvas.outerHTML);\n                    _context.next = 8;\n                    return loadImage(canvasSketch);\n\n                  case 8:\n                    _context.t0 = _context.sent;\n                    loadImagePromises = [_context.t0];\n\n                    if (!exportWithBackgroundImage) {\n                      _context.next = 21;\n                      break;\n                    }\n\n                    _context.prev = 11;\n                    _context.next = 14;\n                    return loadImage(backgroundImage);\n\n                  case 14:\n                    img = _context.sent;\n                    loadImagePromises.push(img);\n                    _context.next = 21;\n                    break;\n\n                  case 18:\n                    _context.prev = 18;\n                    _context.t1 = _context[\"catch\"](11);\n                    console.warn('exportWithBackgroundImage props is set without a valid background image URL. This option is ignored');\n\n                  case 21:\n                    Promise.all(loadImagePromises).then(function (images) {\n                      var renderCanvas = document.createElement('canvas');\n                      renderCanvas.setAttribute('width', _width.toString());\n                      renderCanvas.setAttribute('height', _height.toString());\n                      var context = renderCanvas.getContext('2d');\n\n                      if (!context) {\n                        throw Error('Canvas not rendered yet');\n                      }\n\n                      images.reverse().forEach(function (image) {\n                        context.drawImage(image, 0, 0);\n                      });\n                      resolve(renderCanvas.toDataURL(\"image/\" + imageType));\n                    })[\"catch\"](function (e) {\n                      throw e;\n                    });\n                    _context.next = 27;\n                    break;\n\n                  case 24:\n                    _context.prev = 24;\n                    _context.t2 = _context[\"catch\"](0);\n                    reject(_context.t2);\n\n                  case 27:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 24], [11, 18]]);\n          }));\n\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      },\n      exportSvg: function exportSvg() {\n        return new Promise(function (resolve, reject) {\n          try {\n            var _canvasRef$current2;\n\n            var canvas = (_canvasRef$current2 = canvasRef.current) != null ? _canvasRef$current2 : null;\n\n            if (canvas !== null) {\n              var _svgCanvas$querySelec, _svgCanvas$querySelec2;\n\n              var _getCanvasWithViewBox2 = getCanvasWithViewBox(canvas),\n                  svgCanvas = _getCanvasWithViewBox2.svgCanvas;\n\n              if (exportWithBackgroundImage) {\n                resolve(svgCanvas.outerHTML);\n                return;\n              }\n\n              (_svgCanvas$querySelec = svgCanvas.querySelector(\"#\" + id + \"__background\")) == null ? void 0 : _svgCanvas$querySelec.remove();\n              (_svgCanvas$querySelec2 = svgCanvas.querySelector(\"#\" + id + \"__canvas-background\")) == null ? void 0 : _svgCanvas$querySelec2.setAttribute('fill', canvasColor);\n              resolve(svgCanvas.outerHTML);\n            }\n\n            reject(new Error('Canvas not loaded'));\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }\n    };\n  });\n  /* Add event listener to Mouse up and Touch up to\r\n  release drawing even when point goes out of canvas */\n\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    document.addEventListener('pointerup', handlePointerUp);\n    return function () {\n      document.removeEventListener('pointerup', handlePointerUp);\n    };\n  }, [handlePointerUp]);\n  var eraserPaths = paths.filter(function (path) {\n    return !path.drawMode;\n  });\n  var currentGroup = 0;\n  var pathGroups = paths.reduce(function (arrayGroup, path) {\n    if (!path.drawMode) {\n      currentGroup += 1;\n      return arrayGroup;\n    }\n\n    if (arrayGroup[currentGroup] === undefined) {\n      arrayGroup[currentGroup] = [];\n    }\n\n    arrayGroup[currentGroup].push(path);\n    return arrayGroup;\n  }, [[]]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    role: \"presentation\",\n    ref: canvasRef,\n    className: className,\n    style: _extends({\n      touchAction: 'none',\n      width: width,\n      height: height\n    }, style),\n    \"touch-action\": \"none\",\n    onPointerDown: handlePointerDown,\n    onPointerMove: handlePointerMove,\n    onPointerUp: handlePointerUp\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    version: \"1.1\",\n    baseProfile: \"full\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    style: _extends({\n      width: '100%',\n      height: '100%'\n    }, svgStyle),\n    id: id\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n    id: id + \"__eraser-stroke-group\",\n    display: \"none\"\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n    id: id + \"__mask-background\",\n    x: \"0\",\n    y: \"0\",\n    width: \"100%\",\n    height: \"100%\",\n    fill: \"white\"\n  }), eraserPaths.map(function (eraserPath, i) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(SvgPath, {\n      key: id + \"__eraser-\" + i,\n      id: id + \"__eraser-\" + i,\n      paths: eraserPath.paths,\n      strokeColor: \"#000000\",\n      strokeWidth: eraserPath.strokeWidth\n    });\n  })), react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, backgroundImage && react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"pattern\", {\n    id: id + \"__background\",\n    x: \"0\",\n    y: \"0\",\n    width: \"100%\",\n    height: \"100%\",\n    patternUnits: \"userSpaceOnUse\"\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"image\", {\n    x: \"0\",\n    y: \"0\",\n    width: \"100%\",\n    height: \"100%\",\n    xlinkHref: backgroundImage,\n    preserveAspectRatio: preserveBackgroundImageAspectRatio\n  })), eraserPaths.map(function (_, i) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"mask\", {\n      id: id + \"__eraser-mask-\" + i,\n      key: id + \"__eraser-mask-\" + i,\n      maskUnits: \"userSpaceOnUse\"\n    }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"use\", {\n      href: \"#\" + id + \"__mask-background\"\n    }), Array.from({\n      length: eraserPaths.length - i\n    }, function (_, j) {\n      return j + i;\n    }).map(function (k) {\n      return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"use\", {\n        key: k.toString(),\n        href: \"#\" + id + \"__eraser-\" + k.toString()\n      });\n    }));\n  })), react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n    id: id + \"__canvas-background-group\"\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n    id: id + \"__canvas-background\",\n    x: \"0\",\n    y: \"0\",\n    width: \"100%\",\n    height: \"100%\",\n    fill: backgroundImage ? \"url(#\" + id + \"__background)\" : canvasColor\n  })), pathGroups.map(function (pathGroup, i) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n      id: id + \"__stroke-group-\" + i,\n      key: id + \"__stroke-group-\" + i,\n      mask: \"url(#\" + id + \"__eraser-mask-\" + i + \")\"\n    }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(Paths, {\n      id: id,\n      paths: pathGroup\n    }));\n  })));\n});\n\nvar ReactSketchCanvas = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (props, ref) {\n  var _props$id = props.id,\n      id = _props$id === void 0 ? 'react-sketch-canvas' : _props$id,\n      _props$width = props.width,\n      width = _props$width === void 0 ? '100%' : _props$width,\n      _props$height = props.height,\n      height = _props$height === void 0 ? '100%' : _props$height,\n      _props$className = props.className,\n      className = _props$className === void 0 ? '' : _props$className,\n      _props$canvasColor = props.canvasColor,\n      canvasColor = _props$canvasColor === void 0 ? 'white' : _props$canvasColor,\n      _props$strokeColor = props.strokeColor,\n      strokeColor = _props$strokeColor === void 0 ? 'red' : _props$strokeColor,\n      _props$backgroundImag = props.backgroundImage,\n      backgroundImage = _props$backgroundImag === void 0 ? '' : _props$backgroundImag,\n      _props$exportWithBack = props.exportWithBackgroundImage,\n      exportWithBackgroundImage = _props$exportWithBack === void 0 ? false : _props$exportWithBack,\n      _props$preserveBackgr = props.preserveBackgroundImageAspectRatio,\n      preserveBackgroundImageAspectRatio = _props$preserveBackgr === void 0 ? 'none' : _props$preserveBackgr,\n      _props$strokeWidth = props.strokeWidth,\n      strokeWidth = _props$strokeWidth === void 0 ? 4 : _props$strokeWidth,\n      _props$eraserWidth = props.eraserWidth,\n      eraserWidth = _props$eraserWidth === void 0 ? 8 : _props$eraserWidth,\n      _props$allowOnlyPoint = props.allowOnlyPointerType,\n      allowOnlyPointerType = _props$allowOnlyPoint === void 0 ? 'all' : _props$allowOnlyPoint,\n      _props$style = props.style,\n      style = _props$style === void 0 ? {\n    border: '0.0625rem solid #9c9c9c',\n    borderRadius: '0.25rem'\n  } : _props$style,\n      _props$svgStyle = props.svgStyle,\n      svgStyle = _props$svgStyle === void 0 ? {} : _props$svgStyle,\n      _props$onChange = props.onChange,\n      onChange = _props$onChange === void 0 ? function (_paths) {} : _props$onChange,\n      _props$onStroke = props.onStroke,\n      onStroke = _props$onStroke === void 0 ? function (_path, _isEraser) {} : _props$onStroke,\n      _props$withTimestamp = props.withTimestamp,\n      withTimestamp = _props$withTimestamp === void 0 ? false : _props$withTimestamp;\n  var svgCanvas = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_0__.useState(true),\n      drawMode = _React$useState[0],\n      setDrawMode = _React$useState[1];\n\n  var _React$useState2 = react__WEBPACK_IMPORTED_MODULE_0__.useState(false),\n      isDrawing = _React$useState2[0],\n      setIsDrawing = _React$useState2[1];\n\n  var _React$useState3 = react__WEBPACK_IMPORTED_MODULE_0__.useState([]),\n      resetStack = _React$useState3[0],\n      setResetStack = _React$useState3[1];\n\n  var _React$useState4 = react__WEBPACK_IMPORTED_MODULE_0__.useState([]),\n      undoStack = _React$useState4[0],\n      setUndoStack = _React$useState4[1];\n\n  var _React$useState5 = react__WEBPACK_IMPORTED_MODULE_0__.useState([]),\n      currentPaths = _React$useState5[0],\n      setCurrentPaths = _React$useState5[1];\n\n  var liftStrokeUp = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function () {\n    var _currentPaths$slice$, _currentPaths$slice;\n\n    var lastStroke = (_currentPaths$slice$ = (_currentPaths$slice = currentPaths.slice(-1)) == null ? void 0 : _currentPaths$slice[0]) != null ? _currentPaths$slice$ : null;\n\n    if (lastStroke === null) {\n      console.warn('No stroke found!');\n      return;\n    }\n\n    onStroke(lastStroke, !lastStroke.drawMode);\n  }, [isDrawing]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    liftStrokeUp();\n  }, [isDrawing]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    onChange(currentPaths);\n  }, [currentPaths]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(ref, function () {\n    return {\n      eraseMode: function eraseMode(erase) {\n        setDrawMode(!erase);\n      },\n      clearCanvas: function clearCanvas() {\n        setResetStack([].concat(currentPaths));\n        setCurrentPaths([]);\n      },\n      undo: function undo() {\n        // If there was a last reset then\n        if (resetStack.length !== 0) {\n          setCurrentPaths([].concat(resetStack));\n          setResetStack([]);\n          return;\n        }\n\n        setUndoStack(function (undoStack) {\n          return [].concat(undoStack, currentPaths.slice(-1));\n        });\n        setCurrentPaths(function (currentPaths) {\n          return currentPaths.slice(0, -1);\n        });\n      },\n      redo: function redo() {\n        // Nothing to Redo\n        if (undoStack.length === 0) return;\n        setCurrentPaths(function (currentPaths) {\n          return [].concat(currentPaths, undoStack.slice(-1));\n        });\n        setUndoStack(function (undoStack) {\n          return undoStack.slice(0, -1);\n        });\n      },\n      exportImage: function exportImage(imageType) {\n        var _svgCanvas$current;\n\n        var exportImage = (_svgCanvas$current = svgCanvas.current) == null ? void 0 : _svgCanvas$current.exportImage;\n\n        if (!exportImage) {\n          throw Error('Export function called before canvas loaded');\n        } else {\n          return exportImage(imageType);\n        }\n      },\n      exportSvg: function exportSvg() {\n        return new Promise(function (resolve, reject) {\n          var _svgCanvas$current2;\n\n          var exportSvg = (_svgCanvas$current2 = svgCanvas.current) == null ? void 0 : _svgCanvas$current2.exportSvg;\n\n          if (!exportSvg) {\n            reject(Error('Export function called before canvas loaded'));\n          } else {\n            exportSvg().then(function (data) {\n              resolve(data);\n            })[\"catch\"](function (e) {\n              reject(e);\n            });\n          }\n        });\n      },\n      exportPaths: function exportPaths() {\n        return new Promise(function (resolve, reject) {\n          try {\n            resolve(currentPaths);\n          } catch (e) {\n            reject(e);\n          }\n        });\n      },\n      loadPaths: function loadPaths(paths) {\n        setCurrentPaths(function (currentPaths) {\n          return [].concat(currentPaths, paths);\n        });\n      },\n      getSketchingTime: function getSketchingTime() {\n        return new Promise(function (resolve, reject) {\n          if (!withTimestamp) {\n            reject(new Error(\"Set 'withTimestamp' prop to get sketching time\"));\n          }\n\n          try {\n            var sketchingTime = currentPaths.reduce(function (totalSketchingTime, path) {\n              var _path$startTimestamp, _path$endTimestamp;\n\n              var startTimestamp = (_path$startTimestamp = path.startTimestamp) != null ? _path$startTimestamp : 0;\n              var endTimestamp = (_path$endTimestamp = path.endTimestamp) != null ? _path$endTimestamp : 0;\n              return totalSketchingTime + (endTimestamp - startTimestamp);\n            }, 0);\n            resolve(sketchingTime);\n          } catch (e) {\n            reject(e);\n          }\n        });\n      },\n      resetCanvas: function resetCanvas() {\n        setResetStack([]);\n        setUndoStack([]);\n        setCurrentPaths([]);\n      }\n    };\n  });\n\n  var handlePointerDown = function handlePointerDown(point) {\n    setIsDrawing(true);\n    setUndoStack([]);\n    var stroke = {\n      drawMode: drawMode,\n      strokeColor: drawMode ? strokeColor : '#000000',\n      strokeWidth: drawMode ? strokeWidth : eraserWidth,\n      paths: [point]\n    };\n\n    if (withTimestamp) {\n      stroke = _extends({}, stroke, {\n        startTimestamp: Date.now(),\n        endTimestamp: 0\n      });\n    }\n\n    setCurrentPaths(function (currentPaths) {\n      return [].concat(currentPaths, [stroke]);\n    });\n  };\n\n  var handlePointerMove = function handlePointerMove(point) {\n    if (!isDrawing) return;\n    var currentStroke = currentPaths.slice(-1)[0];\n\n    var updatedStroke = _extends({}, currentStroke, {\n      paths: [].concat(currentStroke.paths, [point])\n    });\n\n    setCurrentPaths(function (currentPaths) {\n      return [].concat(currentPaths.slice(0, -1), [updatedStroke]);\n    });\n  };\n\n  var handlePointerUp = function handlePointerUp() {\n    var _currentPaths$slice$2, _currentPaths$slice2;\n\n    if (!isDrawing) {\n      return;\n    }\n\n    setIsDrawing(false);\n\n    if (!withTimestamp) {\n      return;\n    }\n\n    var currentStroke = (_currentPaths$slice$2 = (_currentPaths$slice2 = currentPaths.slice(-1)) == null ? void 0 : _currentPaths$slice2[0]) != null ? _currentPaths$slice$2 : null;\n\n    if (currentStroke === null) {\n      return;\n    }\n\n    var updatedStroke = _extends({}, currentStroke, {\n      endTimestamp: Date.now()\n    });\n\n    setCurrentPaths(function (currentPaths) {\n      return [].concat(currentPaths.slice(0, -1), [updatedStroke]);\n    });\n  };\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Canvas, {\n    ref: svgCanvas,\n    id: id,\n    width: width,\n    height: height,\n    className: className,\n    canvasColor: canvasColor,\n    backgroundImage: backgroundImage,\n    exportWithBackgroundImage: exportWithBackgroundImage,\n    preserveBackgroundImageAspectRatio: preserveBackgroundImageAspectRatio,\n    allowOnlyPointerType: allowOnlyPointerType,\n    style: style,\n    svgStyle: svgStyle,\n    paths: currentPaths,\n    isDrawing: isDrawing,\n    onPointerDown: handlePointerDown,\n    onPointerMove: handlePointerMove,\n    onPointerUp: handlePointerUp\n  });\n});\n\n\n//# sourceMappingURL=react-sketch-canvas.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-sketch-canvas/dist/react-sketch-canvas.esm.js\n");

/***/ })

};
;